# Main entrypoint of the workflow.
# Please follow the best practices:
# https://snakemake.readthedocs.io/en/stable/snakefiles/best_practices.html,
# in particular regarding the standardized folder structure mentioned there.

# Possible values are 'NA' (North Atlantic), 'SA' (South Atlantic), 'EP' (Eastern North Pacific, which includes                                                the Central Pacific region), 'WP' (Western North Pacific), 'SP' (South Pacific), 'SI' (South Indian), 'NI' (North Indian).
basins = ["NA", "EP", "WP", "SP", "SI", "NI"]  # Replace with actual basin names

config["start"] = 1980
config["end"] = 2023
config["nsynth"] = 25

years = list(range(config["start"], config["end"], 1))

rule create_centroids:
    output:
        "global_centroids.hdf5",
    log:
        "logs/create_centroids.log",
    resources:
        mem_mb_per_cpu=12000,
    conda:
        "climada_env_TC"
    script:
        "scripts/create_centroids.py"


rule tracks_basin_year:
    output:
        "tracks/{basin}/IBTracs_{basin}_{year}.hdf5",
    params:
        timestep=1,
    wildcard_constraints:
        basin="[A-Z]+",
        year="[0-9]{4}",
    conda:
        "climada_env_TC"
    resources:
        mem_mb_per_cpu=8000,
        runtime=240,
    log:
        "logs/find_tracks_{basin}_{year}.log",
    script:
        "scripts/find_tracks_basin_year.py"


def synth_track_memb(wildcards, attempt):
    return 1000 * (config["nsynth"] // 2) * attempt


rule synth_tracks_basin_year:
    input:
        "tracks/{basin}/IBTracs_{basin}_{year}.hdf5",
    output:
        "tracks/{basin}/IBTracs_synth_{basin}_{year}.hdf5",
    wildcard_constraints:
        basin="[A-Z]+",
        year="[0-9]{4}",
    params:
        nsynth=config["nsynth"],
    conda:
        "climada_env_TC"
    resources:
        mem_mb_per_cpu=synth_track_memb,
        runtime=240,
    log:
        "logs/generate_synths_tracks_{basin}_{year}.log",
    script:
        "scripts/generate_synths_tracks_basin_year.py"


rule tcs_basin_year:
    input:
        tracks="tracks/{basin}/IBTracs_synth_{basin}_{year}.hdf5",
        centroids="global_centroids.hdf5",
    output:
        "tropcyc/{basin}/TCs_{basin}_{year}.hdf5",
    params:
        buf=5,
        max_memory_gb=14,
        batch_size = 100
    conda:
        "climada_env_TC"
    resources:
        mem_mb_per_cpu=16000,
        runtime=240,
    log:
        "logs/generate_TCs_{basin}_{year}.log",
    script:
        "scripts/generate_TCs_basin_year.py"


rule surges_basin_year:
    input:
        "tropcyc/{basin}/TCs_{basin}_{year}.hdf5",
    output:
        "surge/{basin}/TCSurges_{basin}_{year}.hdf5",
    params:
        buf=5,
    conda:
        "climada_env_TC"
    resources:
        mem_mb_per_cpu=8000,
        runtime=240,
    log:
        "logs/generate_TCs_{basin}_{year}.log",
    script:
        "scripts/generate_TCs_surges_basin_year.py"


rule concatenate_all_years:
    input:
        expand("tropcyc/{{basin}}/TCs_{{basin}}_{year}.hdf5", year=years),
    output:
        expand("tropcyc/{{basin}}/TCs_{{basin}}_{start}_{end}.hdf5", start=config["start"], end=config["end"])
    wildcard_constraints:
        basin="[A-Z]+",
    resources:
        mem_mb_per_cpu=24000,
    conda:
        "climada_env_TC"
    log:
        "logs/concatenate_{basin}.log",
    script:
        "scripts/concatenate_all_periods.py"


rule concatenate_all_basins:
    input:
        expand("tropcyc/{basin}/TCs_{basin}_1980_2023.hdf5", basin=basins),
    output:
        "tropcyc/all_basins_1980_2023.hdf5",
    conda:
        "climada_env_TC"
    resources:
        mem_mb_per_cpu=24000,
    log:
        "logs/concatenate_all_basins.log",
    script:
        "scripts/concatenate_all_basins.py"
